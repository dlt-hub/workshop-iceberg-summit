import json
import requests

from typing import Final
from urllib.parse import urlunparse, urlparse

LAKEKEEPER_DEMO_SCHEME: Final = "http"
LAKEKEEPER_DEMO_NET_LOCATION: Final = "lakekeeper:8181"
LAKEKEEPER_CREATE_WAREHOUSE_ROUTE: Final = "/management/v1/warehouse"

create_warehouse_url: str = urlunparse(
    urlparse(LAKEKEEPER_CREATE_WAREHOUSE_ROUTE)._replace(
        scheme=LAKEKEEPER_DEMO_SCHEME,
        netloc=LAKEKEEPER_DEMO_NET_LOCATION,
    ),
)


CREATE_WAREHOUSE_REQUEST_WAREHOUSE_NAME_KEY: Final = "warehouse-name"

CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_KEY: Final = "storage-profile"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_TYPE_KEY: Final = "type"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_BUCKET_KEY: Final = "bucket"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_KEY_PREFIX_KEY: Final = "key-prefix"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_REGION_KEY: Final = "region"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_STS_ENABLED_KEY: Final = "sts-enabled"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_FLAVOR_KEY: Final = "flavor"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_ENDPOINT_KEY: Final = "endpoint"
CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_PATH_STYLE_ACCESS_KEY: Final = "path-style-access"

CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_KEY: Final = "storage-credential"
CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_TYPE_KEY: Final = "type"
CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_CREDENTIAL_TYPE_KEY: Final = "credential-type"
CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_AWS_ACCESS_KEY_ID_KEY: Final = "aws-access-key-id"
CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_AWS_SECRET_ACCESS_KEY_KEY: Final = (
    "aws-secret-access-key"
)

LAKEKEEPER_DEMO_WAREHOUSE_NAME: Final = "demo_wh"

LAKEKEEPER_DEMO_STORAGE_PROFILE_TYPE: Final = "s3"
LAKEKEEPER_DEMO_STORAGE_PROFILE_BUCKET: Final = "demo"
LAKEKEEPER_DEMO_STORAGE_PROFILE_REGION: Final = "us-east-1"
LAKEKEEPER_DEMO_STORAGE_PROFILE_STS_ENABLED: Final = False
LAKEKEEPER_DEMO_STORAGE_PROFILE_FLAVOR: Final = "s3-compat"
LAKEKEEPER_DEMO_STORAGE_PROFILE_ENDPOINT: Final = "http://bucket:9000"
LAKEKEEPER_DEMO_STORAGE_PROFILE_PATH_STYLE_ACCESS: Final = True

LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_TYPE: Final = "s3"
LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_CREDENTIAL_TYPE: Final = "access-key"
LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_AWS_ACCESS_KEY_ID: Final = "minioadmin"
LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_AWS_SECRET_ACCESS_KEY: Final = "minioadmin"

LAKEKEEPER_DEMO_CREATE_WAREHOUSE_REQUEST: dict = {
    CREATE_WAREHOUSE_REQUEST_WAREHOUSE_NAME_KEY: LAKEKEEPER_DEMO_WAREHOUSE_NAME,
    CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_KEY: {
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_TYPE_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_TYPE,
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_BUCKET_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_BUCKET,
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_REGION_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_REGION,
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_STS_ENABLED_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_STS_ENABLED,  # noqa
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_FLAVOR_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_FLAVOR,
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_ENDPOINT_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_ENDPOINT,  # noqa
        CREATE_WAREHOUSE_REQUEST_STORAGE_PROFILE_PATH_STYLE_ACCESS_KEY: LAKEKEEPER_DEMO_STORAGE_PROFILE_PATH_STYLE_ACCESS,  # noqa
    },
    CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_KEY: {
        CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_TYPE_KEY: LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_TYPE,  # noqa
        CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_CREDENTIAL_TYPE_KEY: LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_CREDENTIAL_TYPE,  # noqa
        CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_AWS_ACCESS_KEY_ID_KEY: LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_AWS_ACCESS_KEY_ID,  # noqa
        CREATE_WAREHOUSE_REQUEST_STORAGE_CREDENTIAL_AWS_SECRET_ACCESS_KEY_KEY: LAKEKEEPER_DEMO_STORAGE_CREDENTIAL_AWS_SECRET_ACCESS_KEY,  # noqa
    },
}


def create_lakekeeper_warehouse():
    create_warehouse_response = requests.post(
        create_warehouse_url,
        json=LAKEKEEPER_DEMO_CREATE_WAREHOUSE_REQUEST,
    )

    def _extract_error(r):
        return json.loads(r.content).get("error", {}).get("type", "")

    if (
        create_warehouse_response.status_code == 409
        and _extract_error(create_warehouse_response) == "WarehouseNameAlreadyExists"
    ):
        print("Warehouse with that name already exists!")
    elif create_warehouse_response.status_code == 201:
        print(f"Warehouse {LAKEKEEPER_DEMO_WAREHOUSE_NAME} created successfully!")
    else:
        print(create_warehouse_response.status_code)
        print(create_warehouse_response.content)


if __name__ == "__main__":
    create_lakekeeper_warehouse()
    print("Goodbye!")
