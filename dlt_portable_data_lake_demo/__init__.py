"""
A demonstration package that sends github events to Delta Lake, aggregates and shares via Snowflake

>>> import dlt_portable_data_lake_demo
>>>
>>> print(dlt_portable_data_lake_demo.catalogue())  # list datasets
>>> print(dlt_portable_data_lake_demo.catalogue().dataset_name) # lists tables in dataset
>>> df_ = dlt_portable_data_lake_demo.catalogue().dataset_name.table_name.df()  # reads table
"""

# autogenerated part starts
import os
from typing import Optional

from dlt_plus.project import (
    Catalog,
    EntityFactory,
    PipelineManager,
    Project,
    ProjectRunContext,
)


def access_profile() -> str:
    """Implement this function to select profile assigned to users that import this Python package
    into their own scripts or other modules.
    """
    return "access"


def context(profile: Optional[str] = None) -> ProjectRunContext:
    """Returns the context of this package, including run directory,
    data directory and project config
    """
    from dlt_plus.project.run_context import ensure_project

    return ensure_project(
        run_dir=os.path.dirname(__file__),
        profile=access_profile() if not profile else profile,
    )


def config() -> Project:
    """Returns project configuration and getters of entities like sources, destinations
    and pipelines"""
    return context().config


def entities() -> EntityFactory:
    """Returns methods to create entities in this package likes sources, pipelines etc."""
    return EntityFactory(config())


def runner() -> PipelineManager:
    return PipelineManager(config())


def catalog(profile: Optional[str] = None) -> Catalog:
    """Returns a catalogue with available datasets, which can be read and written to"""
    return Catalog(context(profile))


# autogenerated part ends
